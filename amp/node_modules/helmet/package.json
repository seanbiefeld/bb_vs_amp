{
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "name": "helmet",
  "description": "Security header middleware collection for express",
  "version": "0.1.2",
  "keywords": [
    "security",
    "headers",
    "express",
    "x-frame-options",
    "csp",
    "hsts"
  ],
  "repository": {
    "url": "git://github.com/evilpacket/helmet.git"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "devDependencies": {
    "mocha": "*",
    "sinon": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "lib/index",
  "bugs": {
    "url": "https://github.com/evilpacket/helmet/issues"
  },
  "_id": "helmet@0.1.2",
  "dist": {
    "shasum": "fe6e1c3df0b6f860c5d8c4798a8d06bd18dce4b6",
    "tarball": "http://registry.npmjs.org/helmet/-/helmet-0.1.2.tgz"
  },
  "_from": "helmet@0.1.2",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "adam_baldwin",
    "email": "baldwin@andyet.net"
  },
  "maintainers": [
    {
      "name": "adam_baldwin",
      "email": "baldwin@andyet.net"
    }
  ],
  "directories": {},
  "_shasum": "fe6e1c3df0b6f860c5d8c4798a8d06bd18dce4b6",
  "_resolved": "https://registry.npmjs.org/helmet/-/helmet-0.1.2.tgz",
  "readme": "Express/Connect middleware that implement various security headers, with sane defaults where applicable.\n\n## Included Middleware\n\n  - `csp` (Content Security Policy)\n  - `hsts` (HTTP Strict Transport Security)\n  - `xframe` (X-FRAME-OPTIONS)\n  - `iexss` (X-XSS-PROTECTION for IE8+)\n  - `contentTypeOptions` (X-Content-Type-Options nosniff)\n  - `cacheControl` (Cache-Control no-store, no-cache)\n\n## Installation\n\n```\nnpm install helmet\n```\n\n## Basic Express Usage\n\n```javascript\nvar helmet = require('helmet');\n```\n\nTo use a particular middleware application-wide, just use it from your app.\n*Make sure it is listed before `app.router`*.\n\n```javascript\napp.use(express.methodOverride());\napp.use(express.bodyParser());\napp.use(helmet.csp());\napp.use(helmet.xframe());\napp.use(helmet.contentTypeOptions());\napp.use(app.router);\n```\n\nIf you just want to use the default-level policies, all you need to do is:\n\n```javascript\nhelmet.defaults(app);\n```\n\nDefaults are semi-configurable too. If you wanted all the defaults but wanted your own xframe options you could do this:\n\n```javascript\nhelmet.defaults(app, { xframe: false });\napp.use(helmet.xframe('deny'));\n```\n\n## Content Security Policy\nThe [Content Security Policy (W3C Draft)](https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#content-security-policy-header-field) is pretty much required reading if you want to do anything with CSP.\n\n### Browser Support\nCurrently there is CSP support in Firefox and experimental support in Chrome. Both `X-Content-Security-Policy` and `X-WebKit-CSP`\nheaders are set by Helmet.\n\n\nThere are two different ways to build CSP policies with Helmet.\n\n### Using policy()\n\n`policy()` eats a JSON blob (including the output of it's own `toJSON()` function) to create a policy. By default\nhelmet has a defaultPolicy that looks like;\n\n```\nContent-Security-Policy: default-src 'self'\n```\n\nTo override this and create a new policy you could do something like\n\n```javascript\npolicy = {\n  defaultPolicy: {\n    'default-src': [\"'self'\"],\n    'img-src': ['static.andyet.net','*.cdn.example.com'],\n  }\n}\n\nhelmet.csp.policy(policy);\n```\n\n### Using add()\n\nThe same thing could be accomplished using `add()` since the defaultPolicy default-src is already 'self':\n\n```javascript\nhelmet.csp.add('img-src', ['static.andyet.net', '*.cdn.example.com']);\n```\n\n### Reporting Violations\n\nCSP can report violations back to a specified URL. You can either set the report-uri using `policy()` or `add()` or use the `reportTo()` helper function.\n\n```javascript\nhelmet.csp.reportTo('http://example.com/csp');\n```\n\n## HTTP Strict Transport Security\n[draft-ietf-websec-strict-transport-sec-04](http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-04)\n\nThis middleware adds the `Strict-Transport-Security` header to the response. \n\n### Basic Usage\n\nTo use the default header of `Strict-Transport-Security: maxAge=15768000`:\n\n```javascript\nhelmet.hsts();\n```\n\nTo adjust other values for `maxAge` and to include subdomains:\n\n```javascript\nhelmet.hsts(1234567, true);  // hsts(maxAge, includeSubdomains)\n```\n\n\n## X-FRAME-OPTIONS\n\nxFrame is a lot more straight forward than CSP. It has three modes. `DENY`, `SAMEORIGIN`, `ALLOW-FROM`. If your app does not need to be framed (and most don't) you can use the default `DENY`.\n\n### Browser Support\n  - IE8+\n  - Opera 10.50+\n  - Safari 4+\n  - Chrome 4.1.249.1042+\n  - Firefox 3.6.9 (or earlier with NoScript)\n\nHere is an example for both `SAMEORIGIN` and `ALLOW-FROM`:\n\n```javascript\nhelmet.xframe('sameorigin');\n```\n\n```javascript\nhelmet.xframe('allow-from', 'http://example.com');\n```\n\n## X-XSS-PROTECTION\n\nThe following example sets the `X-XSS-PROTECTION: 1; mode=block` header:\n\n```javascript\nhelmet.iexss();\n```\n\n## X-Content-Type-Options\n\nThe following example sets the `X-Content-Type-Options` header to it's only and default option, `nosniff`:\n\n```javascript\nhelmet.contentTypeOptions();\n```\n\n## Cache-Control\n\nThe following example sets the `Cache-Control` header to `no-store, no-cache`. This is not configurable at this time.\n\n```javascript\nhelmet.cacheControl();\n```\n\n## To Be Implemented\n\n  - Warn when self, unsafe-inline or unsafe-eval are not single quoted\n  - Warn when unsafe-inline or unsafe-eval are used\n  - Caching of generated CSP headers\n  - Device to capture and parse reported CSP violations\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/aaabccb3974032554c072dce9a0c46c9 \"githalytics.com\")](http://githalytics.com/evilpacket/helmet)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/evilpacket/helmet"
}
